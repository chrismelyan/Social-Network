{"version":3,"file":"static/js/759.3e77e81e.chunk.js","mappings":"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","sources":["webpack://type-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://type-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://type-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://type-app/./src/components/Profile/Profile.module.css?b512","components/Profile/Contact.tsx","components/Profile/AboutMe.tsx","webpack://type-app/./src/components/Profile/editProfileModal/ProfileModal.module.css?34c9","components/Profile/editProfileModal/ProfileModal.tsx","common/Button/Button.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ProfileInfo_container__oYTAE\",\"backgroundPhoto\":\"ProfileInfo_backgroundPhoto__mqEe-\",\"profilePhotoWrapper\":\"ProfileInfo_profilePhotoWrapper__tpbfP\",\"profilePhoto\":\"ProfileInfo_profilePhoto__GTuwT\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\",\"name\":\"ProfileInfo_name__nzLXx\",\"status\":\"ProfileInfo_status__YrBI5\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport s from './ProfileInfo.module.css';\n\n\ntype ProfileStatusType = {\n    status: string\n    updateUserStatus: (status: string) => void\n}\n\nconst ProfileStatus = (props: ProfileStatusType) => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [status, setStatus] = useState<string>(props.status);\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateUserStatus(status)\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div className={s.status}>\n            <div>\n                {!editMode && <span onDoubleClick={activateEditMode}>{props.status || '----'}</span>}\n            </div>\n            <div>\n                {editMode && <input autoFocus onChange={onChangeHandler} value={status} onBlur={deactivateEditMode}/>}\n            </div>\n        </div>\n    );\n};\n\nexport default ProfileStatus;","import React, {ChangeEvent} from 'react';\nimport s from './ProfileInfo.module.css';\nimport {PhotosType, ProfileType} from \"../../../redux/profile-reducer\";\nimport ProfileStatus from './ProfileStatus';\nimport Preloader from \"../../../common/Preloader/Preloader\";\nimport profilePhoto from '../../../assets/images/user.png';\nimport backgroundPhoto from '../../../assets/images/background.jpg';\n\ntype ProfileInfoType = {\n    profile: ProfileType | null\n    status: string\n    updateUserStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (photo: File) => void\n    photos: PhotosType\n}\n\nconst ProfileInfo = ({profile, photos, status, updateUserStatus, isOwner, savePhoto}: ProfileInfoType) => {\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.currentTarget.files && e.currentTarget.files.length) {\n            savePhoto(e.currentTarget.files[0]);\n        }\n    };\n\n    return (\n        <div>\n            <div className={s.container}>\n                <img className={s.backgroundPhoto}\n                     src={backgroundPhoto} alt={'background'}/>\n                <div className={s.profilePhotoWrapper}>\n                    <img className={s.profilePhoto} src={photos.large ?? profilePhoto} alt={'profile'}/>\n                    {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\n                </div>\n            </div>\n            <div className={s.descriptionBlock}>\n                <h1 className={s.name}>{profile.fullName}</h1>\n                <ProfileStatus status={status} updateUserStatus={updateUserStatus}/>\n            </div>\n        </div>\n    );\n};\n\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\",\"textareaWrapper\":\"MyPosts_textareaWrapper__K01lU\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\",\"postBlock\":\"Post_postBlock__IXjAX\",\"text\":\"Post_text__Js3ZD\",\"likes\":\"Post_likes__K9KVP\"};","import React from 'react';\nimport s from './Post.module.css';\nimport userImg from '../../../../assets/images/user.png'\nimport like from '../../../../assets/images/like.png'\n\ntype MessagePropsType = {\n    message: string\n    likesCount: number\n}\n\nconst Post = (props: MessagePropsType) => {\n    return (\n        <div className={s.item}>\n            <div className={s.postBlock}>\n                <img src={userImg} alt={'user'}/>\n                <div className={s.text}>{props.message}</div>\n            </div>\n            <div className={s.likes}>\n                <img src={like} alt={'like'} style={{width: '15px'}}/>\n                {props.likesCount}\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import React from 'react';\nimport {Form, Formik} from \"formik\";\nimport s from \"../../../common/Button/Button.module.css\";\nimport FormControl from \"../../../common/FormControl/FormControl\";\nimport * as Yup from \"yup\";\n\ntype AddPostFormType = {\n    addPost: (values: string) => void\n}\ntype InitialValuesType = {\n    newPost: string\n}\n\nconst AddPostForm = (props: AddPostFormType) => {\n    const initialValues: InitialValuesType = {\n        newPost: ''\n    }\n    let addNewMessage = (values: InitialValuesType) => {\n        props.addPost(values.newPost);\n    }\n    const validationSchema = Yup.object({\n        newPost: Yup.string().required('Required').max(200, `Maximum 200 symbols`)\n    })\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={(values, {resetForm}) => {\n                addNewMessage(values);\n                resetForm({values: {newPost: ''}})\n            }}>\n            <Form>\n                <FormControl control={'textarea'}\n                             name={'newPost'}\n                             placeholder={\"add a post here\"}\n                />\n                <div>\n                    <button className={s.button} type={'submit'}>Post</button>\n                </div>\n            </Form>\n        </Formik>\n    );\n}\n\nexport default AddPostForm;","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from \"./Post/Post\";\nimport {PostsType} from \"../../../redux/profile-reducer\";\nimport AddPostForm from \"./AddPostForm\";\n\ntype MyPostsType = {\n    posts: Array<PostsType>\n    onAddPost: (value: string) => void\n}\n\nconst MyPosts = (props: MyPostsType) => {\n\n    let postElement = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount} />);\n\n    let addPost = (newPost: string) => {\n        props.onAddPost(newPost)\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3 style={{color: '#8c91b6'}}>My posts</h3>\n            <div className={s.textareaWrapper}>\n                <AddPostForm addPost={addPost}/>\n            </div>\n            <div className={s.posts}>\n                {postElement}\n            </div>\n        </div>\n    );\n}\n\nexport default MyPosts;","import {addPostAC, PostsType} from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {RootStateType} from \"../../../redux/store\";\nimport {Dispatch} from \"redux\";\n\ntype MapStateToPropsType = {\n    posts: PostsType[],\n}\ntype MapDispatchToPropsType = {\n    onAddPost: (value: string) => void\n}\n\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        onAddPost: (value: string) => {\n            dispatch(addPostAC(value))\n        }\n    }\n}\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","// extracted by mini-css-extract-plugin\nexport default {\"aboutMeBlock\":\"Profile_aboutMeBlock__95aPQ\",\"contactsBlock\":\"Profile_contactsBlock__eTT90\"};","import React from 'react';\nimport s from \"./Profile.module.css\";\n\ntype ContactType = {\n    contactTitle: string\n    contactValue: string | null\n}\n\nconst Contact = ({contactTitle, contactValue}: ContactType) => {\n    return (\n        <div className={s.contactsBlock}>\n            <b>{contactTitle}:</b> {contactValue}\n        </div>\n    );\n};\n\nexport default Contact;","import React from 'react';\nimport {ContactsType, ProfileType} from \"../../redux/profile-reducer\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport s from './Profile.module.css';\nimport Contact from \"./Contact\";\n\ntype AboutMeType = {\n    profile: ProfileType | null\n}\n\nconst AboutMe = ({profile}: AboutMeType) => {\n    if (!profile) {\n        return <Preloader/>\n    }\n    return (\n        <div className={s.aboutMeBlock}>\n            <h1>About me</h1>\n            <div>\n                <div>\n                    <b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\n                </div>\n                {profile.lookingForAJob &&\n                    <div>\n                        <b>My professional skills:</b> {profile.lookingForAJobDescription}\n                    </div>\n                }\n                <div>\n                    <b>About me:</b> {profile.aboutMe}\n                </div>\n                <div>\n                    <b>Contacts:</b> {Object.keys(profile.contacts).map(c => {\n                        return <Contact\n                            key={c}\n                            contactTitle={c}\n                            contactValue={profile.contacts[c as keyof ContactsType]}/>\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default AboutMe;","// extracted by mini-css-extract-plugin\nexport default {\"darkBG\":\"ProfileModal_darkBG__qg3xm\",\"centered\":\"ProfileModal_centered__bZlpS\",\"modal\":\"ProfileModal_modal__azCBS\",\"modalHeader\":\"ProfileModal_modalHeader__8yM9Y\",\"heading\":\"ProfileModal_heading__rfyjh\",\"modalContent\":\"ProfileModal_modalContent__0kQLF\",\"inputBlock\":\"ProfileModal_inputBlock__ozJ0C\",\"input\":\"ProfileModal_input__ixLVx\",\"label\":\"ProfileModal_label__ffqGX\",\"buttons\":\"ProfileModal_buttons__-GbJC\",\"backBtn\":\"ProfileModal_backBtn__F0JsE\",\"submitBtn\":\"ProfileModal_submitBtn__vjG+e\"};","import React from 'react';\nimport s from './ProfileModal.module.css';\nimport {useFormik} from \"formik\";\nimport {useDispatch} from \"react-redux\";\nimport {ProfileType, saveProfile} from \"../../../redux/profile-reducer\";\n\ntype ProfileModalType = {\n    setEditMode: (edit: boolean) => void\n    profile: ProfileType\n}\n\nconst ProfileModal = ({profile, setEditMode}: ProfileModalType) => {\n    const dispatch = useDispatch()\n    const formik = useFormik({\n        initialValues: {\n            fullName: profile.fullName,\n            aboutMe: profile.aboutMe,\n            lookingForAJob: profile.lookingForAJob,\n            lookingForAJobDescription: profile.lookingForAJobDescription,\n            github: profile.contacts.github,\n            vk: profile.contacts.vk,\n            facebook: profile.contacts.facebook,\n            instagram: profile.contacts.instagram,\n            twitter: profile.contacts.twitter,\n            website: profile.contacts.website,\n            youtube: profile.contacts.youtube,\n            mainLink: profile.contacts.mainLink,\n        },\n        onSubmit: (values) => {\n            console.log(values.lookingForAJob)\n            const profileData = {\n                fullName: values.fullName,\n                aboutMe: values.aboutMe,\n                lookingForAJob: values.lookingForAJob,\n                lookingForAJobDescription: values.lookingForAJobDescription,\n                contacts: {\n                    github: values.github,\n                    vk: values.vk,\n                    facebook: values.facebook,\n                    instagram: values.instagram,\n                    twitter: values.twitter,\n                    website: values.website,\n                    youtube: values.youtube,\n                    mainLink: values.mainLink\n                }\n            }\n            dispatch(saveProfile(profileData))\n            setEditMode(false);\n        },\n    });\n\n    const getBack = () => {\n        setEditMode(false);\n    }\n\n    return (\n        <div className={s.darkBG}>\n            <div className={s.centered}>\n                <div className={s.modal}>\n                    <div className={s.modalHeader}>\n                        <h1 className={s.heading}>Edit profile</h1>\n                    </div>\n                    <div className={s.modalContent}>\n                        <form onSubmit={formik.handleSubmit}>\n                            <div className={s.inputBlock}>\n                                <label className={s.label} htmlFor=\"fullName\">Name</label>\n                                <input\n                                    id=\"fullName\"\n                                    name=\"fullName\"\n                                    type=\"text\"\n                                    className={s.input}\n                                    onChange={formik.handleChange}\n                                    value={formik.values.fullName}\n                                />\n                            </div>\n                            <div className={s.inputBlock}>\n                                <label className={s.label} htmlFor=\"aboutMe\">About me</label>\n                                <input\n                                    id=\"aboutMe\"\n                                    name=\"aboutMe\"\n                                    type=\"text\"\n                                    className={s.input}\n                                    onChange={formik.handleChange}\n                                    value={formik.values.aboutMe}\n                                />\n                            </div>\n                            <div className={s.inputBlock} style={{marginTop: '5px', marginBottom: '5px'}}>\n                                <label className={s.label} htmlFor=\"lookingForAJob\">Looking for a job?</label>\n                                <input\n                                    id=\"lookingForAJob\"\n                                    name=\"lookingForAJob\"\n                                    type=\"checkbox\"\n                                    onChange={formik.handleChange}\n                                    value={'lookingForAJob'}\n                                />\n                            </div>\n                            <div className={s.inputBlock}>\n                                <label className={s.label} htmlFor=\"lookingForAJobDescription\">Your skills</label>\n                                <input\n                                    id=\"lookingForAJobDescription\"\n                                    name=\"lookingForAJobDescription\"\n                                    type=\"text\"\n                                    className={s.input}\n                                    onChange={formik.handleChange}\n                                    value={formik.values.lookingForAJobDescription}\n                                />\n                            </div>\n                            <div className={s.inputBlock}>\n                                <label className={s.label} htmlFor=\"github\">GitHub</label>\n                                <input\n                                    id=\"github\"\n                                    name=\"github\"\n                                    type=\"text\"\n                                    className={s.input}\n                                    onChange={formik.handleChange}\n                                    value={formik.values.github}\n                                />\n                            </div>\n                            <div className={s.inputBlock}>\n                                <label className={s.label} htmlFor=\"vk\">VK</label>\n                                <input\n                                    id=\"vk\"\n                                    name=\"vk\"\n                                    type=\"text\"\n                                    className={s.input}\n                                    onChange={formik.handleChange}\n                                    value={formik.values.vk}\n                                />\n                            </div>\n                            <div className={s.inputBlock}>\n                                <label className={s.label} htmlFor=\"facebook\">Facebook</label>\n                                <input\n                                    id=\"facebook\"\n                                    name=\"facebook\"\n                                    type=\"text\"\n                                    className={s.input}\n                                    onChange={formik.handleChange}\n                                    value={formik.values.facebook}\n                                />\n                            </div>\n                            <div className={s.inputBlock}>\n                                <label className={s.label} htmlFor=\"instagram\">Instagram</label>\n                                <input\n                                    id=\"instagram\"\n                                    name=\"instagram\"\n                                    type=\"text\"\n                                    className={s.input}\n                                    onChange={formik.handleChange}\n                                    value={formik.values.instagram}\n                                />\n                            </div>\n                            <div className={s.inputBlock}>\n                                <label className={s.label} htmlFor=\"twitter\">Twitter</label>\n                                <input\n                                    id=\"twitter\"\n                                    name=\"twitter\"\n                                    type=\"text\"\n                                    className={s.input}\n                                    onChange={formik.handleChange}\n                                    value={formik.values.twitter}\n                                />\n                            </div>\n                            <div className={s.inputBlock}>\n                                <label className={s.label} htmlFor=\"website\">Website</label>\n                                <input\n                                    id=\"website\"\n                                    name=\"website\"\n                                    type=\"text\"\n                                    className={s.input}\n                                    onChange={formik.handleChange}\n                                    value={formik.values.website}\n                                />\n                            </div>\n                            <div className={s.inputBlock}>\n                                <label className={s.label} htmlFor=\"youtube\">YouTube</label>\n                                <input\n                                    id=\"youtube\"\n                                    name=\"youtube\"\n                                    type=\"text\"\n                                    className={s.input}\n                                    onChange={formik.handleChange}\n                                    value={formik.values.youtube}\n                                />\n                            </div>\n                            <div className={s.inputBlock}>\n                                <label className={s.label} htmlFor=\"mainLink\">Main Link</label>\n                                <input\n                                    id=\"mainLink\"\n                                    name=\"mainLink\"\n                                    type=\"text\"\n                                    className={s.input}\n                                    onChange={formik.handleChange}\n                                    value={formik.values.mainLink}\n                                />\n                            </div>\n                            <div className={s.buttons}>\n                                <button className={s.submitBtn} type=\"submit\">Submit</button>\n                                <button className={s.backBtn} onClick={getBack}>Back</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ProfileModal;","import React from 'react';\nimport s from './Button.module.css'\n\ntype ButtonType = {\n    title: string\n    callback: () => void\n}\n\nconst Button = ({title, callback}: ButtonType) => {\n    return (\n        <div>\n            <button onClick={callback} className={s.button}>{title}</button>\n        </div>\n    );\n};\n\nexport default Button;","import React, {useState} from 'react';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {PhotosType, ProfileType} from \"../../redux/profile-reducer\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport AboutMe from './AboutMe';\nimport ProfileModal from \"./editProfileModal/ProfileModal\";\nimport Button from \"../../common/Button/Button\";\n\ntype ProfilePageType = {\n    profile: ProfileType | null\n    status: string\n    updateUserStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (photo: File) => void\n    photos: PhotosType\n}\n\nconst Profile = (props: ProfilePageType) => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n\n    const editProfile = () => {\n        setEditMode(true);\n    }\n\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <ProfileInfo\n                isOwner={props.isOwner}\n                savePhoto={props.savePhoto}\n                profile={props.profile}\n                photos={props.photos}\n                status={props.status}\n                updateUserStatus={props.updateUserStatus}\n            />\n            <AboutMe profile={props.profile}/>\n            {props.isOwner && <Button title={'edit'} callback={editProfile}/>}\n            {editMode && <ProfileModal profile={props.profile} setEditMode={setEditMode}/>}\n            <hr/>\n            <MyPostsContainer />\n        </div>\n    )\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    getUserProfile, getUserStatus, PhotosType,\n    ProfilePageType,\n    ProfileType, savePhoto, updateUserStatus\n} from \"../../redux/profile-reducer\";\nimport {RootStateType} from \"../../redux/store\";\nimport {withRouter} from \"./ComponentWithRouterProps\";\nimport {RouteComponentProps} from \"@reach/router\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\ntype PathParamsType = {\n    router: any\n}\ntype MapStateToPropsType = {\n    profile: ProfileType | null\n    isAuth: boolean\n    status: string\n    authorizedUserId: number | null\n    photos: PhotosType\n}\nexport type MapDispatchToPropsType = {\n    getUserProfile: (userId: number) => void\n    getUserStatus: (userId: number) => void\n    updateUserStatus: (status: string) => void\n    savePhoto: (photo: File) => void\n}\ntype ProfileContainerType = MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps<PathParamsType>\n\nclass ProfileContainer extends React.Component<ProfileContainerType, ProfilePageType> {\n    refreshProfile() {\n        const {authorizedUserId, router, getUserProfile, getUserStatus} = this.props;\n        let userId = router.params.userId;\n        if (!userId) {\n            userId = authorizedUserId;\n            if(!userId) {\n                router.history.push('login');\n            }\n        }\n        if (userId) {\n            getUserProfile(userId);\n            getUserStatus(userId);\n        }\n    };\n\n    componentDidMount() {\n        this.refreshProfile();\n    };\n\n    componentDidUpdate(prevProps: ProfileContainerType) {\n        if (this.props.router.params.userId != prevProps.router.params.userId)\n            this.refreshProfile();\n    };\n\n    render() {\n        return (\n            <Profile\n                {...this.props}\n                savePhoto={this.props.savePhoto}\n                photos={this.props.photos}\n                isOwner={!this.props.router.params.userId}\n                profile={this.props.profile}\n                status={this.props.status}\n                updateUserStatus={this.props.updateUserStatus}\n            />\n        )\n    };\n}\n\nlet mapStateToProps = (state: RootStateType): MapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    isAuth: state.auth.isAuth,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.id,\n    photos: state.profilePage.photos\n})\n\nexport default compose<React.ComponentType>(withAuthRedirect, withRouter,\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateType>\n    (mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto}))(ProfileContainer);"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateUserStatus","profile","photos","isOwner","savePhoto","Preloader","src","backgroundPhoto","alt","large","profilePhoto","type","files","length","fullName","userImg","message","like","style","width","likesCount","validationSchema","Yup","newPost","required","max","initialValues","onSubmit","values","resetForm","addPost","addNewMessage","FormControl","control","name","placeholder","postElement","posts","map","p","id","color","onAddPost","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","MyPosts","contactTitle","contactValue","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","c","useDispatch","formik","useFormik","github","vk","facebook","instagram","twitter","website","youtube","mainLink","console","log","profileData","saveProfile","handleSubmit","htmlFor","handleChange","marginTop","marginBottom","onClick","title","callback","ProfileContainer","this","authorizedUserId","router","getUserProfile","getUserStatus","userId","params","history","push","refreshProfile","prevProps","React","compose","withAuthRedirect","withRouter","isAuth","auth"],"sourceRoot":""}